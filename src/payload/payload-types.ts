/* tslint:disable */

/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    pages: Page;
    posts: Post;
    projects: Project;
    media: Media;
    categories: Category;
    users: User;
    comments: Comment;
    elections: Election;
    nominations: Nomination;
    positions: Position;
    votes: Vote;
    electionResults: ElectionResult;
    merch: Merch;
    sales: Sale;
    tickets: Ticket;
    orderedTickets: OrderedTicket;
    orderedMerch: OrderedMerch;
    orders: Order;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
  };
  globals: {
    settings: Settings;
    header: Header;
    footer: Footer;
  };
}

export interface Page {
  id: string;
  title: string;
  publishedDate?: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    media: string | Media;
  };
  layout: (
    | {
    invertBackground?: boolean;
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'cta';
  }
    | {
    invertBackground?: boolean;
    columns?: {
      size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
      richText: {
        [k: string]: unknown;
      }[];
      enableLink?: boolean;
      link?: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'content';
  }
    | {
    invertBackground?: boolean;
    position?: 'default' | 'fullscreen';
    media: string | Media;
    id?: string;
    blockName?: string;
    blockType: 'mediaBlock';
  }
    | {
    introContent: {
      [k: string]: unknown;
    }[];
    populateBy?: 'collection' | 'selection';
    relationTo?: 'posts' | 'projects';
    categories?: string[] | Category[];
    limit?: number;
    selectedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocsTotal?: number;
    id?: string;
    blockName?: string;
    blockType: 'archive';
  }
    )[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}

export interface Media {
  id: string;
  alt: string;
  caption?: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}

export interface Category {
  id: string;
  title?: string;
  parent?: string | Category;
  breadcrumbs?: {
    doc?: string | Category;
    url?: string;
    label?: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}

export interface Post {
  id: string;
  title: string;
  categories?: string[] | Category[];
  publishedOn?: string;
  authors?: string[] | User[];
  populatedAuthors?: {
    id?: string;
    name?: string;
  }[];
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    media: string | Media;
  };
  layout: (
    | {
    invertBackground?: boolean;
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'cta';
  }
    | {
    invertBackground?: boolean;
    columns?: {
      size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
      richText: {
        [k: string]: unknown;
      }[];
      enableLink?: boolean;
      link?: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'content';
  }
    | {
    invertBackground?: boolean;
    position?: 'default' | 'fullscreen';
    media: string | Media;
    id?: string;
    blockName?: string;
    blockType: 'mediaBlock';
  }
    | {
    introContent: {
      [k: string]: unknown;
    }[];
    populateBy?: 'collection' | 'selection';
    relationTo?: 'posts' | 'projects';
    categories?: string[] | Category[];
    limit?: number;
    selectedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocsTotal?: number;
    id?: string;
    blockName?: string;
    blockType: 'archive';
  }
    )[];
  enablePremiumContent?: boolean;
  premiumContent?: (
    | {
    invertBackground?: boolean;
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'cta';
  }
    | {
    invertBackground?: boolean;
    columns?: {
      size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
      richText: {
        [k: string]: unknown;
      }[];
      enableLink?: boolean;
      link?: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'content';
  }
    | {
    invertBackground?: boolean;
    position?: 'default' | 'fullscreen';
    media: string | Media;
    id?: string;
    blockName?: string;
    blockType: 'mediaBlock';
  }
    | {
    introContent: {
      [k: string]: unknown;
    }[];
    populateBy?: 'collection' | 'selection';
    relationTo?: 'posts' | 'projects';
    categories?: string[] | Category[];
    limit?: number;
    selectedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocsTotal?: number;
    id?: string;
    blockName?: string;
    blockType: 'archive';
  }
    )[];
  relatedPosts?: string[] | Post[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}

export interface User {
  id: string;
  name?: string;
  username: string;
  roles?: ('admin' | 'user')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}

export interface Project {
  id: string;
  title: string;
  categories?: string[] | Category[];
  publishedDate?: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    media: string | Media;
  };
  layout: (
    | {
    invertBackground?: boolean;
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'cta';
  }
    | {
    invertBackground?: boolean;
    columns?: {
      size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
      richText: {
        [k: string]: unknown;
      }[];
      enableLink?: boolean;
      link?: {
        type?: 'reference' | 'custom';
        newTab?: boolean;
        reference: {
          value: string | Page;
          relationTo: 'pages';
        };
        url: string;
        label: string;
        appearance?: 'default' | 'primary' | 'secondary';
      };
      id?: string;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'content';
  }
    | {
    invertBackground?: boolean;
    position?: 'default' | 'fullscreen';
    media: string | Media;
    id?: string;
    blockName?: string;
    blockType: 'mediaBlock';
  }
    | {
    introContent: {
      [k: string]: unknown;
    }[];
    populateBy?: 'collection' | 'selection';
    relationTo?: 'posts' | 'projects';
    categories?: string[] | Category[];
    limit?: number;
    selectedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocs?:
      | (
      | {
      value: string;
      relationTo: 'posts';
    }
      | {
      value: string;
      relationTo: 'projects';
    }
      )[]
      | (
      | {
      value: Post;
      relationTo: 'posts';
    }
      | {
      value: Project;
      relationTo: 'projects';
    }
      )[];
    populatedDocsTotal?: number;
    id?: string;
    blockName?: string;
    blockType: 'archive';
  }
    )[];
  relatedProjects?: string[] | Project[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}

export interface Comment {
  id: string;
  user?: string | User;
  populatedUser?: {
    id?: string;
    name?: string;
  };
  doc?: string | Post;
  comment?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}

export interface Election {
  id: string;
  name: string;
  nominationStart: string;
  nominationEnd: string;
  votingStart: string;
  votingEnd: string;
  positions: string[] | Position[];
  updatedAt: string;
  createdAt: string;
}

export interface Position {
  id: string;
  name: string;
  description: string;
  importance: number;
  updatedAt: string;
  createdAt: string;
}

export interface Nomination {
  id: string;
  nominees: string[] | User[];
  populatedNominees?: {
    id?: string;
    name?: string;
    username?: string;
  }[];
  nickname?: string;
  manifesto?: {
    [k: string]: unknown;
  }[];
  position: string | Position;
  election: string | Election;
  image?: string | Media;
  droppedOut: boolean;
  supporters: string[] | User[];
  joinUUID: string;
  updatedAt: string;
  createdAt: string;
}

export interface Vote {
  id: string;
  username: string;
  position: string | Position;
  election: string | Election;
  RONPosition: number;
  preference: string[] | Nomination[];
  updatedAt: string;
  createdAt: string;
}

export interface ElectionResult {
  id: string;
  election: string | Election;
  position: string | Position;
  electedNominee?: string | Nomination;
  ballot: string;
  roundTranscript: string;
  rounds: {
    outcome: 'Elect' | 'Defeat';
    nomination?: string | Nomination;
    votes: {
      count: number;
      nomination?: string | Nomination;
      state: 'Elected' | 'Hopeful' | 'Defeated';
      id?: string;
    }[];
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}

export interface Merch {
  id: string;
  name: string;
  sale: string | Sale;
  description?: {
    [k: string]: unknown;
  }[];
  sizes?: {
    size: string;
    id?: string;
  }[];
  colours?: {
    colour: string;
    image?: string | Media;
    hexValue?: string;
    id?: string;
  }[];
  variations: {
    variation: string;
    image?: string | Media;
    price: number;
    form?: string | Form;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}

export interface Sale {
  id: string;
  name: string;
  saleStart: string;
  saleEnd: string;
  updatedAt: string;
  createdAt: string;
}

export interface Form {
  id: string;
  title: string;
  fields?: (
    | {
    name: string;
    label?: string;
    width?: number;
    defaultValue?: string;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'text';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    defaultValue?: string;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'textarea';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    defaultValue?: string;
    options?: {
      label: string;
      value: string;
      id?: string;
    }[];
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'select';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'email';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'state';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'country';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    defaultValue?: number;
    required?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'number';
  }
    | {
    name: string;
    label?: string;
    width?: number;
    required?: boolean;
    defaultValue?: boolean;
    id?: string;
    blockName?: string;
    blockType: 'checkbox';
  }
    | {
    message?: {
      [k: string]: unknown;
    }[];
    id?: string;
    blockName?: string;
    blockType: 'message';
  }
    )[];
  submitButtonLabel?: string;
  confirmationType?: 'message' | 'redirect';
  confirmationMessage: {
    [k: string]: unknown;
  }[];
  redirect?: {
    url: string;
  };
  emails?: {
    emailTo?: string;
    cc?: string;
    bcc?: string;
    replyTo?: string;
    emailFrom?: string;
    subject: string;
    message?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}

export interface Ticket {
  id: string;
  name: string;
  sale: string | Sale;
  description?: {
    [k: string]: unknown;
  }[];
  count?: number;
  price: number;
  form?: string | Form;
  updatedAt: string;
  createdAt: string;
}

export interface OrderedTicket {
  id: string;
  ticket: string | Ticket;
  user: string | User;
  form?: string | FormSubmission;
  updatedAt: string;
  createdAt: string;
}

export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?: {
    field: string;
    value: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}

export interface OrderedMerch {
  id: string;
  merch: string | Merch;
  user: string | User;
  size?: string;
  colour?: string;
  variation: string;
  form?: string | FormSubmission;
  updatedAt: string;
  createdAt: string;
}

export interface Order {
  id: string;
  user: string | User;
  items:
    | (
    | {
    value: string;
    relationTo: 'orderedMerch';
  }
    | {
    value: string;
    relationTo: 'orderedTickets';
  }
    )[]
    | (
    | {
    value: OrderedMerch;
    relationTo: 'orderedMerch';
  }
    | {
    value: OrderedTicket;
    relationTo: 'orderedTickets';
  }
    )[];
  price?: number;
  status: 'basket' | 'pending' | 'failed' | 'completed';
  updatedAt: string;
  createdAt: string;
}

export interface Redirect {
  id: string;
  from: string;
  to: {
    type?: 'reference' | 'custom';
    reference:
      | {
      value: string | Page;
      relationTo: 'pages';
    }
      | {
      value: string | Post;
      relationTo: 'posts';
    };
    url: string;
  };
  updatedAt: string;
  createdAt: string;
}

export interface Settings {
  id: string;
  postsPage?: string | Page;
  projectsPage?: string | Page;
  updatedAt?: string;
  createdAt?: string;
}

export interface Header {
  id: string;
  navItems?: {
    link: {
      type?: 'reference' | 'custom';
      newTab?: boolean;
      reference: {
        value: string | Page;
        relationTo: 'pages';
      };
      url: string;
      label: string;
    };
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}

export interface Footer {
  id: string;
  navItems?: {
    link: {
      type?: 'reference' | 'custom';
      newTab?: boolean;
      reference: {
        value: string | Page;
        relationTo: 'pages';
      };
      url: string;
      label: string;
    };
    id?: string;
  }[];
  updatedAt?: string;
  createdAt?: string;
}
